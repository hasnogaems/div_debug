int mysubnormalize(s21_decimal value_1, s21_decimal value_2, s21_decimal *result){
    int sign1=extractBitSign(value_1);
    int sign2=extractBitSign(value_2);  
    unsigned int sign=0;  
    int ddctbl_bgr=0;
    

    nullify(result);
    s21_big_decimal big1, big2, resbig, buffer;
    nullifyb(&big1);nullifyb(&big2);nullifyb(&resbig);nullifyb(&buffer);
    int scale=normalize(value_1, value_2, &big1, &big2);
    if(sign1==sign2){
        sign=(unsigned int)sign1;
        if(s21_is_greater_ours(value_2, value_1)){
buffer=big1;
big1=big2;
big2=buffer;
    sign=1;    }
    mysubb(big1, big2, &resbig);}
    if(sign1!=sign2){   
        sign=0;
       if(sign1==1){
        setSign(&value_1, 0);

       }
       if(sign2==1){
        setSign(&value_2, 0);

       }
        myaddnormalize(value_1, value_2, result);
        
        return 1;
    
    }

    #include "s21_decimal.h"
#include "utils.h"

int normalize(s21_decimal num_1, s21_decimal num_2,
                         s21_big_decimal *big1,
                         s21_big_decimal *big2) {
  // Копируем в big decimal
  *big1=mantissadecimalToBig(num_1);
  *big2=mantissadecimalToBig(num_2);
  

  // Степень дробной части
  int scale_1 = retrieveLevel(num_1);
  int scale_2 = retrieveLevel(num_2);
  int scale = 0;

  // Проверка входного аргумента
  if (scale_1 == scale_2) {
    return scale_1;
  }

  // на что будем умнажать для нормализации
  s21_big_decimal scale_difference = {1, 0, 0, 0, 0};
 
 

  // Выбираем какое число будем нормализировать и умнажаем для нормализации
  if (scale_1 > scale_2) {
     for (int i = 1; i < fabs(scale_1 - scale_2); i++) {
   mymulby10(big2);
  }
   
    
    scale = scale_1;
  } else {
     for (int i = 0; i < fabs(scale_1 - scale_2); i++) {
   mymulby10(big1);
  }
   
    
    scale = scale_2;

  }


  // возвращаем итоговый scale
  return scale;
}

